<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on Nikola's Blog</title><link>https://knez.github.io/posts/</link><description>Recent content in Posts on Nikola's Blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sat, 08 Jan 2022 13:07:39 +0100</lastBuildDate><atom:link href="https://knez.github.io/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>SANS Holiday Hack Challenge 2021</title><link>https://knez.github.io/posts/sans-holiday-hack-challenge-2021/</link><pubDate>Sat, 08 Jan 2022 13:07:39 +0100</pubDate><guid>https://knez.github.io/posts/sans-holiday-hack-challenge-2021/</guid><description>Table of Contents Objective 1 - KringleCon Orientation Objective 2 - Where in the World is Caramel Santaigo? Objective 3 - Thaw Frost Tower&amp;rsquo;s Entrance Objective 4 - Slot Machine Investigation Objective 5 - Strange USB Device Objective 6 - Shellcode Primer Objective 7 - Printer Exploitation Objective 8 - Kerberoasting on an Open Fire Objective 9 - Splunk! Objective 10 - Now Hiring! Objective 11 - Customer Complaint Analysis Objective 12 - Frost Tower Website Checkup Objective 13 - FPGA Programming Terminal 1 - Open the Gate Terminal 2 - Document Analysis Terminal 3 - Grepping for Gold Terminal 4 - Logic Munchers Terminal 5 - IPv6 Sandbox Terminal 6 - HoHo &amp;hellip; No Terminal 7 - Yara Analysis Terminal 8 - IMDS Exploration Terminal 9 - Elf Code Python Terminal 10 - Strace Ltrace Retrace Terminal 11 - Frostavator Terminal 12 - Holiday Hero Objective 1 - KringleCon Orientation ðŸ”—Task: Get your bearings at KringleCon</description></item><item><title>Reversing Avast Quarantine</title><link>https://knez.github.io/posts/reversing-avast-quarantine/</link><pubDate>Tue, 16 Nov 2021 22:03:56 +0200</pubDate><guid>https://knez.github.io/posts/reversing-avast-quarantine/</guid><description>Intro ðŸ”—In this blog post, I will attempt to describe the Avast Antivirus quarantine file format. We&amp;rsquo;ll see where the files are stored and how they can be retrieved.
Throughout the process, I will use two files for demonstration purposes. A simple eicar.com and a meterpreter.exe, both put into quarantine.
Part 0 - The overall structure ðŸ”—Avast stores all of its quarantine data inside the folder C:\ProgramData\Avast Software\Avast\chest
Here&amp;rsquo;s an example of the folder&amp;rsquo;s content structure</description></item><item><title>OverTheWire: Leviathan</title><link>https://knez.github.io/posts/overthewire-leviathan/</link><pubDate>Sat, 26 Jun 2021 21:35:00 +0200</pubDate><guid>https://knez.github.io/posts/overthewire-leviathan/</guid><description>Level 0 â†’ Level 1 ðŸ”—Quick find on the current folder reveals hidden folder backup
$ find . . ./.bash_logout ./.backup ./.backup/bookmarks.html ./.profile ./.bashrc Within it, there is a file bookmarks.html containing bookmarks in the old Netscape file format.
Let&amp;rsquo;s do a quick grep on that file
$ grep -i Password .backup/bookmarks.html --color=auto &amp;lt;DT&amp;gt;&amp;lt;A HREF=&amp;#34;http://leviathan.labs.overthewire.org/passwordus.html | This will be fixed later, the password for leviathan1 is rioGegei8m&amp;#34; ADD_DATE=&amp;#34;1155384634&amp;#34; LAST_CHARSET=&amp;#34;ISO-8859-1&amp;#34; ID=&amp;#34;rdf:#$2wIU71&amp;#34;&amp;gt;password to leviathan1&amp;lt;/A&amp;gt; Answer: rioGegei8m</description></item><item><title>OverTheWire: Krypton</title><link>https://knez.github.io/posts/overthewire-krypton/</link><pubDate>Sat, 29 May 2021 20:25:08 +0200</pubDate><guid>https://knez.github.io/posts/overthewire-krypton/</guid><description>Level 0 â†’ Level 1 ðŸ”—Welcome to Krypton! The first level is easy. The following string encodes the password using Base64:
S1JZUFRPTklTR1JFQVQ=
Solution
This is fairly straightforward.
$ echo &amp;#39;S1JZUFRPTklTR1JFQVQ=&amp;#39; | base64 -d Answer: KRYPTONISGREAT
Level 1 â†’ Level 2 ðŸ”—The password for level 2 is in the file â€˜krypton2â€™. It is â€˜encryptedâ€™ using a simple rotation. It is also in non-standard ciphertext format. When using alpha characters for cipher text it is normal to group the letters into 5 letter clusters, regardless of word boundaries.</description></item><item><title>How to Extract Quarantine Files from Windows Defender</title><link>https://knez.github.io/posts/how-to-extract-quarantine-files-from-windows-defender/</link><pubDate>Thu, 13 May 2021 21:04:56 +0200</pubDate><guid>https://knez.github.io/posts/how-to-extract-quarantine-files-from-windows-defender/</guid><description>During a forensic investigation, it can often be useful to examine the contents of a Windows Defender quarantine. It is surprising just how many interesting artifacts might reside there, ready to be analyzed.
However, we don&amp;rsquo;t want to live-boot the image and then manually extract each and every file. Ideally, we would like to automate this process as much as possible, and extract the data offline from a mounted image.</description></item><item><title>picoCTF 2021: Forensics</title><link>https://knez.github.io/posts/picoctf-2021-forensics/</link><pubDate>Tue, 30 Mar 2021 22:30:08 +0200</pubDate><guid>https://knez.github.io/posts/picoctf-2021-forensics/</guid><description>Information ðŸ”—Files can always be changed in a secret way. Can you find the flag? cat.jpg
Solution
We can inspect the image metadata using the exiftool
$ exiftool cat.jpg ... Copyright Notice : PicoCTF Application Record Version : 4 XMP Toolkit : Image::ExifTool 10.80 License : cGljb0NURnt0aGVfbTN0YWRhdGFfMXNfbW9kaWZpZWR9 Rights : PicoCTF Image Width : 2560 Image Height : 1598 The License string appears to be base64 encoded.
$ echo cGljb0NURnt0aGVfbTN0YWRhdGFfMXNfbW9kaWZpZWR9 | base64 -d Flag: picoCTF{the_m3tadata_1s_modified}</description></item><item><title>picoCTF 2021: General Skills</title><link>https://knez.github.io/posts/picoctf-2021-general-skills/</link><pubDate>Mon, 29 Mar 2021 18:46:41 +0200</pubDate><guid>https://knez.github.io/posts/picoctf-2021-general-skills/</guid><description>Obedient Cat ðŸ”—This file has a flag in plain sight (aka &amp;ldquo;in-the-clear&amp;rdquo;)
Solution
$ curl https://mercury.picoctf.net/static/0e428b2db9788d31189329bed089ce98/flag Flag: picoCTF{s4n1ty_v3r1f13d_2fd6ed29}
Python Wrangling ðŸ”—Python scripts are invoked kind of like programs in the Terminal&amp;hellip; Can you run this Python script using this password to get the flag?
Solution
Provided python script does encryption/decryption using the Fernet module.
To decrypt flag.txt.en, simply run:
$ python3 ende.py -d flag.txt.en $(cat pw.txt) Flag: picoCTF{4p0110_1n_7h3_h0us3_ac9bd0ff}
Wave a flag ðŸ”—Can you invoke help flags for a tool or binary?</description></item><item><title>SANS Holiday Hack Challenge 2020</title><link>https://knez.github.io/posts/sans-holiday-hack-challenge-2020/</link><pubDate>Fri, 26 Feb 2021 16:59:39 +0100</pubDate><guid>https://knez.github.io/posts/sans-holiday-hack-challenge-2020/</guid><description>Table of Contents Objective 1 - Uncover Santa&amp;rsquo;s Gift List Objective 2 - Investigate S3 Bucket Objective 3 - Point-of-Sale Password Recovery Objective 4 - Operate the Santavator Objective 5 - Open HID Lock Objective 6 - Splunk Challenge Objective 7 - Sleigh&amp;rsquo;s CAN-D-BUS Problem Objective 8 - Broken Tag Generator Objective 9 - ARP Shenanigans Objective 10 - Defeat Fingerprint Sensor Objective 11a - Naughty/Nice List with Blockchain Investigation Part 1 Objective 11b - Naughty/Nice List with Blockchain Investigation Part 2 Conclusion Objective 1 - Uncover Santa&amp;rsquo;s Gift List ðŸ”—Task: There is a photo of Santa&amp;rsquo;s Desk on that billboard with his personal gift list.</description></item></channel></rss>